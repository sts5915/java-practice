package practice01;
		//11일차 (상 속)			
public class practice18 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
//		상  속
//		
//		상속은 기존의 클래스에 기능을 추가하거나 재정의하여 새로운 클래스를 정의하는 것을 의미한다.
//		
//		캡슐화, 추상화와 더불어 객체 지향 프ㅗ그래밍을 구성하는 특징 중 하나이다.
//		
//		상속을 이용하면 기존에 정의되어 있는 클래스의 모든 필드와 메소드를 물려받아, 새로운 클래스를 생성할 수 있다.
//		
//		이때 기존에 정의되어 있던 클래스를 부모 클래스 또는 상위 클래스, 기초클래스라고 한다
//		
//		상속을 통해 새롭게 작성되는 클래스를 자식 클래스 또는 하위 클래스, 파생 클래스라고도 한다
		
//		상속의 장점
//		1. 기존에 작성된 클래스를 재활용할 수 있다.
//		2. 자식 클래스 설계시 중복되는 멤버를 미리 부모 클래스에 작성해 놓으면, 자식 클래스에서는 해당 멤버를 작성하지 않아도 된다.
//		3. 클래스 간의 계층적 관계를 구성함으로써 다형성의 문법적 토대를 마련한다.
//		
//		자식 클래스(child class)
//		부모 클래스의 모든 특성을 물려받아 새롭게 작성된 클래스를 의미한다.
//		
//		형식
//		class 자식 클래스이름 extends 부모클래스 이름{...}
		
//		부모 클래스와 자식 클래스 간의 포함관계
//		
//		부모 클래스는 자식 클래스에 포함된 것으로 볼 수 있다.
//		따라서 부모 클래스에 새로운 필드를 하나 추가하면, 자식 클래스에도 자동으로 해당 필드가 추가된 것처럼 동작한다.
//		
//		자식 클래스에는 부모 클래스의 필드와 메소드만이 상속되며, 생성자와 초기화 블록은 상속되지 않는다.
		
//		오버라이딩
//		
//		부모 클래스로부터 상속받은 메서드의 내용을 재정의 하는 것
//		
//		물론, 상속받은 메서드를 그대로 사용해도 되지만 자식 클래스에서 변경해야하는 경우가 많다
//		이렇게 변경이 이루어지는 경우에 부모 메서드를 오버라이딩한다.
		
//		오버라이딩 사용조건
//		메서드를 새로 만드는 것이 아니고 내용만 새로 작성하는 것이다.
//		메서드의 선언부는 부모와 완전히 일치해야 한다.
//		
//		1. 자식 클래스의 오버라이딩 하려는 메서드는 부모 클래스의 메서드와
//		   이름이 같아야 한다
//		   매개변수가 같아야 한다
//		   반환타입이 같아야 한다
//		
//		2. 접근 제어자는 조상 클래스의 메서드보다 좁은 범위로 변경할 수 없다.
//			ex)부모 클래스 : public void xxx() {}, 자식클래스 : protected void xxx() {} //에러
//			참고 : public -> protected -> (default) -> private 접근 범위가 좁아짐
//			
//		3. 부모 클래스의 메서드보다 많은 수의 예외를 선언할 수 없다
//			ex)부모 클래스 : void xxx() throws IOException, SQLException{}
//			   자식 클래스 : void xxx() throws Exception{}
//			단순 개수 문제가 아님. Exception은 모든 예외의 최고 부모이다. 가장 많은 개수의 예외를 던질 수 있다.
//			
//		4. 인스턴스 메서드를 static 메서드 또는 그 반대로 변경할 수 없다.
		
		
		   
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
