package practice01;
		// 8일차 (배열)
public class practice13 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		// 배열 (array)
//		배열은 언제 사용할까?
//		프로그래밍하다 보면 변수가 여러개 필요할때가 있다.
//		예를 들어 학생 1000명의 점수를 저장해야 한다
//		그럼 학생이 1000명이니 점수도 1000개 이를 저장할 변수도 1000개가 필요하다 이렇게 변수가 많아지면 변수를 선언하는 것만으로도 힘들다
//		이럴 때 배열을 사용한다
//		즉 배열은 데이터형이 같은 변수가 여러개 필요할 때 사용한다
//		변수는 하나인데 값은 여러개 들어갈 때 이다
//		정수 100개를 저장할 수 있는 배열을 만들어보자
//		우선 정수를 저장하므로 int형 변수여야 한다
//		하지만 앞에서 선언한 int형 변수와는 다르다
//		int[] array1 = new int[100];
//		지금 선언하는 것은 배열이므로 자료형 int 다음에 배열을 나타내는 대괄호를 넣고 배열명 array1로 넣어 선언한다
//		다음으로 배열을 생성하는데 이때 반드시 new라는 키워드를 사용해야 한다
//		int형을 담을 것이고 100개를 담는다고 지정한다
//		배열은 처음 선언할때 만든 크기가 변하지 않는다
//		배열에 값을 넣어줄때는 배열의 이름과 배열 표시인 대괄호 안에 인덱스(index)를 적어줘야 한다
//		인덱스란?
//		배열은 저장 공간이 여러 개인데 변수는 배열 전체를 가리키기 때문에 배열 안 값을 하나씩 가리킬 방법이 필요하다
//		그래서 배열의 여러 공간에 번호를 붙여 놓는다
//		그것이 바로 인덱스인다
//		인덱스를 이용하면 배열의 몇번째 값을 가리키는지 알 수 있다.
//		자바는 인덱스를 0번부터 사용하므로 100개라면 인덱스는 0~99까지 사용할 수 있다
//		아래 예제는
//		array1의 0번 인덱스에 50이라는 값을 담는다
//		array1의 10번 인덱스에 100이라는 값을 담는다
//		라는 뜻이다
//		int[] array1 = new int[100];
//		array1[0]=50;     //array1의 0번 인덱스에 50이라는 값을 담는다
//		array1[10]=100;   //array1의 10번 인덱스에 100이라는 값을 담는다
		
//		int[] array1 = new int[3];
//		>> int형의 array1이라는 이름의 배열을 선언하고 이 배열에 정수 세개를 담을 수 있다는 뜻이다.
//		
//		array1 > index0 0, index1 0, index2 0
//		사용할 수 있는 인덱스는 0~2까지 입니다
//		
//		0번 인덱스에는 1, 1번 인덱스는 2 이렇게 담았다면
//		이 배열에는 값이 0이 아니라 1, 2, 3, 이렇게 담길 것이다
		
//		배열은 메모리 공간 하나에 정숫값 세 개를 가지는 것이 아니라,
//		그림처럼 메모리 세 칸에 각각 정숫값을 담은 것이라고 기억하면 된다
		
//		array[0]=     1;
//		array[1]=            2;
//		array[2]=                     3;
		
//		배열을 선언하고 동시에 값까지 초기화 할 수 있다
//		배열의 크기를 넣지 않고 곧바로 값을 담아준다
//		
//		다음 코드는 정숫값 네 개를 담는 배열을 생성하고
//		그 배열에 각각 1,2,3,4,라는 값을 넣는다는 의미이다
//		
//		int[] array2 = new int[] {1,2,3,4};
		
//		더 간단하게 선언하고 초기화하는 방법
//		
//		new라는 코드 없이 {1,2,3,4}처럼 값을 넣어 사용할 수 있다.
//		이 방법은 앞 예제에서 new int[] {1,2,3,4}와 똑같은 의미로 파악되어 실행된다
//		
//		사용자 편의를 위해서 new int[]가 없지만마치 있는 것처럼 해석해 실행시키는 것이다
//		
//		int[] array2 = new int[] {1,2,3,4};
//		int[] array3 = {1,2,3,4};
		
//		배열에 들어있는 값을 꺼내서 사용하는 방법
//		
//		꺼내서 사용할 때는 배열명과 몇 번째 값을 꺼낼 것인지 인덱스를 적어주면 된다.
//		단순히 꺼내기만 하면 배열을 별다른 작업을 안 하기 때문에 println으로 콘솔에 출력하겠다.
//		
//		int[] array2 = new int[] {1,2,3,4};
//		int[] array3 = {1,2,3,4};
//		
//		System.out.println(array3[3]);
		
//		array3이 가리키는 0,1,2,3번중 3번 인덱스에 들어 있는 값은 4이기 때문에 4라는 값이 출력되었다.
		
//		다른 곳에서 사용하고 싶다면 값을 꺼내온다.
//		
//		int형 배열에 들어있는 값을 꺼내오도록 똑같이 int형 변수 value를 하나 마련하고,
//		변수 value에 배열 array3의 0번 인덱스에 있는 값을 꺼내서 담는다.
		
//		int[] array2 = new int[] {1,2,3,4};
//		int[] array3 = {1,2,3,4};
//		
//		int value = array3[0];
//		System.out.println(value);
		
		// 문제 1
		// 정숫값 1~5까지 를 담을 수 있는 배열 array를 선언하고 인덱스 두번째 값을 출력하시오.
		
//		int[] array = {1,2,3,4,5};
//		System.out.println(array[2]);     //인덱스는 0번째부터 시작하니까 두번째값이라 하면 그냥 2입력하면 됨
		
		// 문제 2
		// iarray라는 이름으로 정숫값 100개를 담을수있는 배열을 선언하고 배열의 0번 인덱스에 1이라는 값을 담고, 
		// 1번 인덱스에 2라는 값을 담은뒤 인덱스 0과 1의 값을 더하는 프로그램을 작성
		
//		int[] iarray = new int[100];
//		iarray[0]=1;
//		iarray[1]=2;
//		
//		int a = iarray[0];
//		int b = iarray[1];
//		
//		System.out.println(a+b);
//		System.out.println(iarray[0]+iarray[1]);		
		
//		100개까지 배열 안에 1~100까지 값을 차례대로 담으려면 어떻게 해야 할까?
//				
//		반복적으로 넣어줘야 한다
//		이런경우 반복문을 사용하면된다
//		for문을 사용해 1~100까지 값을 배열안에 넣는 코드 작성해 보시오.
		
//		int[] array1 = new int[100];
//		for(int i = 0; i<100; i++) { // 배열은 0번부터 시작하니 0으로 초기화
//			array1[i]=(i+1);		 // 조건식에는 100개까지이므로 99번까지 실행
//		}
//		System.out.println(array1[99]);
		
//		배열 크기가 달라지면 이 숫자도 수정해야 하는데 매번 수정하지 않으려면 배열 크기를 알아내서 넣으면 된다
//		배열의 길이를 가리키는 length라는 속성을 사용한다
//		100이라고 적는 대신에 배열명.length라고 적으면 배열크기를 출력한다.

//		int[] iarray = new int[100];
//		
//		for(int i=0; i< iarray.length; i++) {
//			iarray[i] = i +1;
//		}
		
		// 문제 3
		// 배열 1~100까지 값을 넣고 배열에 저장된 값을 모두 더하는 프로그램을 작성하시오
//		int[] array1 = new int[100];
//		int sum = 0;
//		for(int i = 0; i < array1.length; i++) {
//			array1[i]= i+1;
//			sum += array1[i];
//		}
//		for(int i =0; i< array1.length; i++) {
//			sum += array1[i];
//		}
//		System.out.println(sum);
		
//		2차원 배열은 배열의 배열이라는 뜻이다
//		
//		2차원 배열을 선언할 때는 배열 표시를 두 번 적으면 된다
//		
//		예를 들어 정수형 2차원 배열은 int형으로 배열 표시 두 개를 만들어 2차원 배열을 하나 선언하고 다음에 오는 배열명은 원하는 이름으로 설정한다
//		
//		2차원 배열을 설정할때도 똑같이 new라고 하고, 배열 크기를 지저한다. 배열이 두개이니 배열 크기를 각각 지정한다
//		
//		int[][] array4 = new int[3][4];
		
//		  도식화   index0    index1   index2    index3
//		array4 =    0         0>10      0         0
//				    0         0         0         0
//				    0         0         0         0
		
//		변수'0'이 가리키는 1차원 배열 중 1번 인덱스에 10을 넣겠다고 지정
//		array4[0][1]=10;
		
//		int[][] array5 = new int[3][];  
//		array5[0] = new int[1];			// 참조변수 '0'에는 한개짜리 int형 배열
//		array5[1] = new int[2];			// 참조변수 '1'에는 두개짜리 int형 배열
//		array5[2] = new int[3];			// 참조변수 '2'에는 세개짜리 int형 배열
//		
//		즉 각각 길이가 다른 배열을 만들 수 있다는 뜻
//		도식화
//		array5 = 0
//				 0      0
//				 0      0        0
		
//		2차원 배열도 선언과 동시에 초기화할 수 있다
//		중괄호를 사용해 배열을 만들면 선언과 동시에 값을 저장할 수 있다.
		
//		int[][] array6 = {{1},{1,2},{1,2,3}};
//		System.out.println(array6[0][0]);

//		문자열 데이터 배열
//		String[] fruitGroup = {"딸기", "바나나", "자두", "키위"};
//		
//		1) fruitGroup에 담을 배열의 데이터타입이 문자열이라는 의미
//		2) 배열을 선언할 때는 데이터타입 뒤에 []을 붙여야 한다. []가 없다면 배열이 아니라 문자열 데이터 타입을 갖는 변수가 된다.
//		배열의 첫 번째 역할은 연관된 데이터를 저장하는 것이다 위 예제는 데이터를 저장하는 컨테이너로서 배열의 역할을 잘 보여주고 있다
		
//		String[] fruitGroup = {"딸기", "바나나", "자두", "키위"};
//		System.out.println(fruitGroup[0]);
//		숫자랑 똑같이 0번 인덱스부터 시작
//		"딸기", "바나나", "자두", "키위"는 원소 라고 한다.
		
//		배열을 정의하는 다른 방법과 배열에 담겨있는 데이터의 수를 알아내는 방법
//		String[] fruitGroup = new String[4];
//		fruitGroup[0]="딸기";
//		System.out.println(fruitGroup.length);
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
		
		
		
		
		
		
		

		
		
		
	}

}
