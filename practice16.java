package practice01;
		// 10일차(객체지향)
public class practice16 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
//		자바는 객체지향 언어이다
//		
//		프로그래밍을 구성하는 요소를 객체로 보고 그 객체 간에 상호 작용하도록
//		프로그래밍하는 것을 객체지향 프로그래밍이라고 한다
//		
//		객체지향 프로그래밍에서 객체로 도출 가능한 것은 사람, 사물, 장소, 개념등이다
//		각 객체는 스스로의 속성을 알고, 그 기능을 가지고 있다
		
//		자바에서 객체를 만들어보자
//		자바에서 객체를 만들려면 반드시 클래스를 먼저 만들어야 한다
//		클래스는 객체를 만들기 위한 일종의 틀이다
//		예를 들어 붕어빵이 객체라면 붕어빵을 만들어내는 틀은 클래스이다
//		자동차 객체가 필요하다면 자동차 클래스를 먼저 만들어야 한다
		
//		쉽게 클래스는 객체를 만들기 위한 설계도이다
//		
//		자동차라는 객체를 만들기 전에 이 자동차라는 객체가 어떤 속성을 가져야 하는지, 어떤 기능을 가져야 하는지
//		필요한 사항을 꼼꼼히 설계해야 한다
//		
//		이런 설계도를 자바에서는 클래스라고 한다.
		
//		설계도가 없다면 자동차를 한 대 만들때마다
//		여러 사항들을 모두 고려하고 만들어야 한다.
//		
//		설계도를 하나 만들어놓으면 설계도 하나를 통해
//		얼마든지 많은 자동차를 만들어낼 수 있다
//		
//		클래스는 보통 클래스를 선언한다고 이야기한다
//		
//		public class 뒤에 클래스 명을 적는다
//		클래스 블록을 만들어서 그 안에 필요한 구성 요소를 넣어준다
//		
//		public class 클래스면 {...}
		
//		public class Car{...}
//		
//		Car 클래스에는 아무것도 없다
//		
//		마치 붕어빵 틀을 만드는 것과 비슷하다
//		하지만 붕어빵 틀을 만들었다고 해서 자동으로 붕어빵이 만들어지는 것은 아니다.
		
//		public class Car{
//			public static void main(String[] args) {
//				
//			}
//		}
//		
//		메인 메서드를 만든다
//		아래는 객체를 만든 예시이다.
//		public class Car{
//			public static void main(String[] args) {
//				Car c1 = new Car();
//			}
//		}
		
//		public class Car{
//			public static void main(String[] args) {
//				Car c1 = new Car();
//				Car c2 = new Car();
//			}
//		}
//		
//		new라는 키워드 뒤에 나오는 Car을 생성자라고 한다
//		이 코드는 생성자를 이용해서 메모리에 객체를 만들라는 명령이다
//		
//		메모리에 만들어진 객체를 인스턴스라고도 부른다
//		이렇게 만들어진 객체를 참조하는 변수가 c1이다
//		
//		작성한 코드 두 줄을 실행하면 Car라는 객체가 두 개 만들어지고,
//		각각의 객체를 참조하는 변수 두개와 c1,c2가 선언된다.
		
		// 참조형
		
//		자바는 변수를 선언하려면 반드시 변수의 자료형을 정해줘야 한다.
//		
//		변수의 자료형에서는 기본형과 참조형이 있다
//		기본형은 앞서 배운 논리형, 문자형, 정수형, 실수형 총 8개이다
//		논리형 boolean
//		문자형 char
//		정수형 byte short int long
//		실수형 float double
//		
//		이 기본형들은 클래스가 아니다
//		
//		참조형은 기본형을 제외한 모든 형을 말한다
//		앞서 배운 배열도 참조형이고, 클래스도 참조형이다.
		
//		우선, 기본형 변수 하나 int i =4라고 선언한다
//		이 코드는 i라는 4바이트 크기의 정수형 변수에 숫자 4를 저장한다는 뜻이다
//		package javaStudy;
//		public class Type{
//			public static void main(String[] args) {
//				int i = 4;
//			}
//		}
		
//		이번에는 참조형 변수를 하나 선언하겠다.
//		String이라는 클래스를 이용해 참조형 변수 str을 선언했다.
//		package javaStudy;
//		public class ReferenceDataType{
//			public static void main(String[] args) {
//				int i = 4;
//				String str = new String("hello");
//			}
//		}
//		
//		코드를 보면 변수 앞에 기본형이 아닌 String이라는 클래스가 적혀있다.
//		대입 연산자(=) 뒤에는 new 다음에 생성자가 있다.
//		(생성자는 곧 배울 예정이므로 여기서는 '생성자가 있구나'라고만 생각하자)
		
//		new라는 키워드는 클래스를 메모리에 올리라는 뜻이다
//		이렇게 메모리에 올라간 클래스를 인스턴스라고 한다
//		
//		메모리에 올라간 인스턴스를 가리키는 변수, 참조하는 변수,
//		레퍼런스하는 변수가 str이라는 변수이다
//		
//		참조한다 레퍼런스한다는 것은 변수가 인스턴스를 가지는 것이 아니라 말 그대로 가리킨다는 의미이다
//		
//		변수 str에 String 인스턴스가 있는 것이 아니라 다른 메모리 영역에 있는 String이라는 인스턴스를 변수 str이 가리킨다.
//		
//		String str = new String("hello");
//		
//		str -----참조한다-----hello
//							String객체
		
//		즉 str이라는 변수에는 메모리의 위치(주소)값이 저장된다.
//		
//		메모리 위치 값을 저장한다 하더라도 어떤 메모리에 저장하는지 그정보를 아는 방법은 없다
//		그러므로 str변수는 String인스턴스를 참조한다고만 알아두면 된다
//		
//		앞으로 배울 클래스는 모두 이와 같은 참조형임을 기억해 두자
		
//		참조형 변수 정리
		
//		String str = new String("hello");
//		
//		str 변수 앞에 기본 자료형이 아닌 String 클래스가 적혀있다
//		
//		(=)뒤에는 new다음에 생성자라는 것이 있다
//		
//		new라는 키워드는 클래스를 메모리에 올려준다. 이렇게 메모리에 올라간 클래스를 인스턴스라고 한다
//		
//		메모리에 올라간 인스턴스를 가리키는 변수 참조하는 변수 레퍼런스하는 변수가 str이다
//		변수가 인스턴스를 가지는 것이 아니라 말 그대로 가리킨다는 의미이다
//		
//		str이라는 변수에는 메모리의 위치 값을 저장한다 어떤 메모리에 저장하는지 안 수 있는 방법은 없기 때문에
//		str변수는 String 인스턴스를 참조한다.
//		앞으로 배울 클래스들은 모두 참조형이다.
		
//		객체, 클래스, 인스턴스 등 용어 정리
//		
//		객체는 우리가 소프트웨어 세계에 구형해야 할 대상이다
//		객체를 구현하기 위한 설계도가 클래스이다
//		
//		클래스라는 설계도에 따라 소프트웨어 세상에 구현된 실체가 인스턴스이다
//		클래스를 메모리에 올려 인스턴스를 만드는 과정을 인스턴스화라고 한다
//		
//		실체화된 인스턴스는 메모리에 할당된다. 인스턴스를 객체라고 불러도 무방하다.
//		개념적으로 인스턴스는 객체에 포함된다고 볼 수 있기 때문이다.
		
//		이번에는 자바에서 가장 많이 사용하는 클래스인 String 클래스를 알아보자
//		
//		우리가 이때까지 알게 모르게 String클래스를 사용했다.
//		예를 들어 main메서드에서도 String클래스를 볼 수 있다.
//		
//		package javaStudy;
//		public class StringExam{
//			public static void main(String[] args) {
//				
//			}
//		}
		
//		String은 클래스이면서도 동시에 데이터 타입으로 취급된다.
//		특별한 취급을 받기 때문에 혼란스럽겠지만 이러한 구분은 자바의 설계와 역사적인 이유 때문에 발생한다
//		
//		String은 가장 많이 사용되는 클래스인 만큼 자바에서도 특별하게 취급한다.
//		
//		먼저 모든 클래스는 new 연산자를 사용해야 되는데 
//		String클래스는 new라는 연산자를 이용하지 않고도 인스턴스를 만들어낼 수 있다.
		
//		String str1 = "hello";
//		String str2 = "hello";
//		
//		String str3 = new String("hello");
//		String str4 = new String("hello");
//		
//		str1, str2라는 변수 옆에 기본 자료형에서 했던 것처럼 바로 값을 넣어도 인스턴스가 생성된다.
//		물론 str3, str4처럼 일반 클래스와 똑같이 new를 이용해도 된다
//		
//		new를 사용하지 않으면 똑같은 문자열일 경우 같은 메모리 공간을 사용한다
//		str1,str2는 같은 문자열을 참조하게 된다. new를 사용하면 같은 문자열이어도 매번 메모리에 새롭게 할당된다
//		String 클래스는 다른 클래스와 다르게 new를 사용하지 않고 사용할 수 있으므로 
//		메모리를 아끼려면 new를 사용하지 않고 사용하는것이 좋다.
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
